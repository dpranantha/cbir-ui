// GRADLE-2087 workaround, perform after java plugin
status = project.hasProperty('preferredStatus')?project.preferredStatus:(version.contains('SNAPSHOT')?'snapshot':'release')

allprojects { project ->
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    // Restore status after Java plugin
    status = rootProject.status

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
        options.encoding = 'UTF-8'
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        from sourceSets.main.allSource
        classifier 'sources'
        extension 'jar'
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        from javadoc.destinationDir
        classifier 'javadoc'
        extension 'jar'
    }

    configurations.create('sources')
    configurations.create('javadoc')
    configurations.archives {
        extendsFrom configurations.sources
        extendsFrom configurations.javadoc
    }

    artifacts {
        sources(sourcesJar) {
            // Weird Gradle quirk where type will be used for the extension, but only for sources
            type 'jar'
        }
        javadoc(javadocJar) {
            type 'javadoc'
        }
    }

    configurations {
        provided {
            description = 'much like compile, but indicates you expect the JDK or a container to provide it. It is only available on the compilation classpath, and is not transitive.'
            transitive = true
            visible = true
        }
    }

    project.sourceSets {
        main.compileClasspath += project.configurations.provided
        main.runtimeClasspath -= project.configurations.provided
        test.compileClasspath += project.configurations.provided
        test.runtimeClasspath += project.configurations.provided
    }

    configurations {
        all {
            // check for updates every build
            resolutionStrategy {

                cacheChangingModulesFor 0, 'seconds'

                //failOnVersionConflict()

                // Force these versions everywhere (including transitive)
                eachDependency { DependencyResolveDetails details ->
                    if (details.requested.group == 'com.sun.jersey') {
                        details.useVersion jerseyVersion
                    }
                }
            }
        }

        all*.exclude group: 'log4j', module: 'log4j'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        all*.exclude group: 'cglib', module: 'cglib'
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        all*.exclude group: 'org.springframework', module: 'spring-test'
    }

    dependencyManagement {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    // Exclude eclipse bin directories from idea because they are annoying
    idea.module.excludeDirs += [file('bin'), file('.settings')]
    idea.module.downloadSources = true
}

subprojects {

    // Creating pom properties file and adding it to jar
    task createPomProperties << {
        def pomDir = new File("$buildDir/pom/META-INF/maven/${project.group}/${project.name}")
        pomDir.mkdirs()

        def pomFile = new File(pomDir, "pom.properties")
        if(pomFile.exists()) pomFile.delete();

        // Don't remove the comment else you will break the selfdiagnose page
        ant.propertyfile(file: pomFile, comment: 'Generated by Gradle') {
            entry( key: "version", value: project.version)
            entry( key: "artifactId", value: project.name)
            entry( key: "groupId", value: project.group)
        }
    }

    sourceSets {
        main {
            resources {
                srcDir "$buildDir/pom"
            }
        }
    }
    assemble.dependsOn(createPomProperties)
}
